import time
import telebot
import random
from telebot import types
from selenium import webdriver
from selenium.webdriver.common.by import By

import sqlite3

bot = telebot.TeleBot('token')

score21_user, score21_bot = 0, 0
login = None
admins = [747864333]


# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

@bot.message_handler(commands=['start'])
def start_message(message):
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
    curbaz = connect.cursor()
    curbaz.execute('SELECT * FROM users')
    users = curbaz.fetchall()
    if len(users) % 10 <= 1 or len(users) % 10 >= 5:
        bot.send_message(message.chat.id,
                         f'<b>–ü—Ä–∏–≤–µ—Ç</b>, {message.from_user.first_name} ‚Ä¢‚©ä‚Ä¢! \n–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–∞–π—Ç–∞–º'
                         f' –∏—Ç–º–æ. \n–í –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —É–∂–µ: ' + str(
                             len(users)) + ' —á–µ–ª–æ–≤–µ–∫ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–≤–µ–¥–∏ /help\n–ù–∞–ø–∏—à–∏ –º–Ω–µ '
                                           '/reg, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ò–¢–ú–û',
                         parse_mode='html', reply_markup=mark)
    else:
        bot.send_message(message.chat.id,
                         f'<b>–ü—Ä–∏–≤–µ—Ç</b>, {message.from_user.first_name} ‚Ä¢‚©ä‚Ä¢! \n–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–∞–π—Ç–∞–º –∏—Ç–º–æ.'
                         f' \n–í –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —É–∂–µ: ' + str(
                             len(users)) + ' —á–µ–ª–æ–≤–µ–∫–∞ \n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–≤–µ–¥–∏ /help'
                                           '\n–ù–∞–ø–∏—à–∏ –º–Ω–µ /reg, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ò–¢–ú–û',
                         parse_mode='html', reply_markup=mark)


@bot.message_handler(commands=['reg'])
def registration(message):
    global find_user
    connect = sqlite3.connect('itmohelpbot.sql')
    cursor = connect.cursor()
    cursor.execute(
        'CREATE TABLE IF NOT EXISTS users(uid int, name varchar(50), passw varchar(50), wins int, rasp int)')
    connect.commit()
    cursor.close()
    connect.close()
    connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
    curbaz = connect.cursor()
    curbaz.execute('SELECT * FROM users')
    users = curbaz.fetchall()
    for el in users:
        if str(message.from_user.id) != str(el[0]):
            find_user = 0
        else:
            find_user = 1
            break

    if find_user == 0:
        mark = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        mark.row(btn1)
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω <b>itmoID</b>!', parse_mode='html',
                         reply_markup=mark)
        bot.register_next_step_handler(message, user_login_registration)

    else:
        bot.send_message(message.chat.id, '–¢—ã –∑–∞—Ä–µ–≥–∞–Ω!')


def user_login_registration(message):
    global login
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        mark = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
        btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
        btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
        btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
        btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
        btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
        btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
        mark.row(btn1, btn2)
        mark.row(btn3)
        mark.row(btn4, btn5)
        mark.row(btn6)
        mark.row(btn7)
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=mark)
    else:
        login = message.text.strip()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å!', parse_mode='html')
        bot.register_next_step_handler(message, user_password_registration)


def user_password_registration(message):
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=mark)
    else:
        passw = message.text.strip()
        connect = sqlite3.connect('itmohelpbot.sql')
        cursor = connect.cursor()
        uid = message.from_user.id
        cursor.execute("INSERT INTO users (uid, name, passw, wins, rasp) VALUES('%s', '%s', '%s', '%s', '%s')" % (
            uid, login, passw, 0, 0))
        connect.commit()
        cursor.close()
        connect.close()
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=mark)


@bot.message_handler(commands=['new_login'])
def new_user_login(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω')
    bot.register_next_step_handler(message, new_user_login_for_replace)


def new_user_login_for_replace(message):
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=mark)
    else:
        newlog = message.text.strip()
        sqlite_connection = sqlite3.connect('itmohelpbot.sql')
        cursor = sqlite_connection.cursor()
        user_id = str(message.chat.id)
        cursor.execute('''UPDATE users SET name = ? WHERE uid = ?''', (newlog, user_id))

        sqlite_connection.commit()
        cursor.close()
        bot.send_message(message.chat.id, '–õ–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=mark)


@bot.message_handler(commands=['new_pass'])
def new_user_password(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, new_user_password_for_replace)


def new_user_password_for_replace(message):
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=mark)
    else:
        new_password = message.text.strip()
        sqlite_connection = sqlite3.connect('itmohelpbot.sql')
        cursor = sqlite_connection.cursor()
        user_id = str(message.chat.id)
        cursor.execute('''UPDATE users SET passw = ? WHERE uid = ?''', (new_password, user_id))

        sqlite_connection.commit()
        cursor.close()
        bot.send_message(message.chat.id, '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω! ‚úÖ', reply_markup=mark)


@bot.message_handler(commands=['help'])
def helpmes(message):
    message_for_user_1 = '\n\n0) –Ø —Ä–µ–∞–≥–∏—Ä—É—é –Ω–∞ –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤, –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞ –ª—é–±—ã–º–∏ –±—É–∫–≤–∞–º–∏'
    message_for_user_2 = '\n\n1) –ù–∞–ø–∏—Å–∞–≤ –º–Ω–µ —Å–ª–æ–≤–æ "—Å—Å—ã–ª–∫–∏", —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤–∞–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ò–¢–ú–û'
    message_for_user_3 = '\n\n2) –ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Å—ã–ª–æ–∫ –∏ —è —Ç–µ–±–µ –∏—Ö —Å–∫–∏–Ω—É'
    message_for_user_4 = '\n\n3) –ù–∞–ø–∏—Å–∞–≤ —Å–ª–æ–≤–æ <b>"–ø–æ–º–æ—â—å"</b> –∏–ª–∏ <b>"—Ö–µ–ª–ø"</b> —è –æ–ø—è—Ç—å –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã'
    message_for_user_5 = (
        '\n\n4) –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å), —Ç–æ –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é.\n–ù–∞–ø–∏—à–∏–µ –º–Ω–µ –≤ '
        '–æ–¥–Ω–æ–º'
        '—Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ª–æ–≤–æ "–ü–æ–∂–µ–ª–∞–Ω–∏–µ" –∏ –Ω–∞–ø–∏—à–∏ —Å–∞–º–æ –ø–æ–∂–µ–ª–∞–Ω–∏–µ\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–æ–∂–µ–ª–∞–Ω–∏–µ —Å–¥–µ–ª–∞–π—Ç–µ –º–∞–π–Ω–∏–Ω–≥!!!!"')
    message_for_user_6 = '\n\n5) –ù–∞–ø–∏—à–∏ –º–Ω–µ /reg, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –ò–¢–ú–û'
    message_for_user_7 = '\n\n–í—Å–µ –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É —Ç–µ–±—è –≤ –∫–Ω–æ–ø–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö!'

    bot.send_message(message.chat.id,
                     f'{message.from_user.first_name}, –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:' + message_for_user_1 + message_for_user_2 +
                     message_for_user_3 + message_for_user_4 + message_for_user_5 + message_for_user_6 +
                     message_for_user_7,
                     parse_mode='html')


@bot.message_handler(commands=['code'])
def codemes(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='GitHub', callback_data='github')
    btn2 = types.InlineKeyboardButton(text='.txt', callback_data='txt')
    markup.row(btn1)
    markup.row(btn2)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥', reply_markup=markup)


# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-  –†–µ–∞–∫—Ü–∏–∏ –ë–û–¢–ê _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    # -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-  —Ä–µ–∞–∫—à–Ω —Ñ–æ –º–µ—Å–µ–¥–∂ –ë–û–¢–ê _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
    global el, find_user, achievement_wins_info, achievement_check_study_schedule_info
    if message.text.lower() == '–ø–æ–∂–µ–ª–∞–Ω–∏–µüìù':
        mark = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        btn2 = types.KeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ?')
        mark.row(btn1)
        mark.row(btn2)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –∞–¥–º–∏–Ω—É', reply_markup=mark)
        bot.register_next_step_handler(message, poj)

    elif message.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì':
        message_random = random.randint(0, 4)
        if message_random == 0:
            bot.send_message(message.chat.id, '–ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∑–≤—ë–∑–¥–∞–º..')
        if message_random == 2:
            bot.send_message(message.chat.id, '–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–ª–∏—Ç—ã—Ö –±–∞–∑–∞—Ö..')
        if message_random == 3:
            bot.send_message(message.chat.id, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é my.itmo, –º–æ–∂–µ—Ç —Ç–∞–º —á—Ç–æ-—Ç–æ –µ—Å—Ç—å...')
        if message_random == 1:
            bot.send_message(message.chat.id, '–°–µ–π—á–∞—Å –±—É–¥–µ—Ç magic (–≤–ø–æ–ª–Ω–µ —Ä–µ–∞–ª—å–Ω–æ)')
        if message_random == 4:
            bot.send_message(message.chat.id, '–í–æ—Ç —è —Ç–æ–∂–µ –ª–µ–Ω–∏–≤—ã–π, –Ω–æ —Ä–∞–¥–∏ —Ç–µ–±—è –∑–∞–π–¥—É –Ω–∞ my.itmo')
        message_about_study_schedule = ''
        teacher_info = []
        auditorium_info = []
        other_info = []
        lesson_info_for_out = []
        connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
        curbaz = connect.cursor()
        curbaz.execute('SELECT * FROM users')
        users = curbaz.fetchall()

        for el in users:
            if str(message.from_user.id) == str(el[0]):
                find_user = 0
                break
            else:
                find_user = 1

        if find_user == 0:
            sqlite_connection = sqlite3.connect('itmohelpbot.sql')
            cursor = sqlite_connection.cursor()
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
            user_id = str(el[0])
            value = int(el[4]) + 1
            cursor.execute('''UPDATE users SET rasp = ? WHERE uid = ?''', (value, user_id))

            sqlite_connection.commit()
            cursor.close()
            user_login = el[1]
            user_pass = el[2]
            driver = webdriver.Chrome()
            driver.get(
                "https:/my.itmo.ru/login")
            time.sleep(2)
            login_itmo = driver.find_element(By.ID, "username")
            login_itmo.clear()
            login_itmo.send_keys(str(user_login))

            password_itmo = driver.find_element(By.ID, "password")
            password_itmo.clear()
            password_itmo.send_keys((str(user_pass)))
            button_in = driver.find_element(By.ID, "kc-login")
            button_in.click()
            time.sleep(4)

            para = driver.find_elements(By.CLASS_NAME, 'title')
            time_start = driver.find_elements(By.CLASS_NAME, 'time-start')
            time_end = driver.find_elements(By.CLASS_NAME, 'time-end')
            lesson_info = driver.find_elements(By.CLASS_NAME, 'lesson-info')
            for k in range(len(lesson_info)):
                # if len(lesson2[k].text) > 0 and lesson2[k].text.lower() != '–∫–æ–ª–ª–æ–∫–≤–∏—É–º':
                lesson_info_for_out.append(lesson_info[k].text)
            if len(para) > 2:
                if len(lesson_info_for_out) > 0:
                    for i in range(0, len(lesson_info_for_out) - 1, 3):
                        teacher_info.append(lesson_info_for_out[i])
                        auditorium_info.append(lesson_info_for_out[i + 1])
                        other_info.append(lesson_info_for_out[i + 2])
                for i in range(1, len(para) - 1):
                    message_about_study_schedule += '–ü–∞—Ä–∞ ' + str(i) + ' ‚åõÔ∏è : ' + str(
                        time_start[i - 1].text) + '-' + str(
                        time_end[i - 1].text) + '\nüìñ: ' + str(
                        para[i].text) + ' ' + other_info[i - 1].lower() + '\nü§ì: ' + teacher_info[i - 1] + '\nüèï: ' + \
                                                    auditorium_info[i - 1] + '\n' '*' + '\n'
                for i in range(1, 4):
                    message_about_study_schedule = message_about_study_schedule.replace('*',
                                                                                        '\n-_-_-_-_-_-_-_-_-_-_-_-_-\n',
                                                                                        1)
                message_about_study_schedule = message_about_study_schedule.replace('*', '')
                bot.send_message(message.chat.id, '<b>-_-_-_–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_-_-_-</b>\n\n' + message_about_study_schedule,
                                 parse_mode='html')
            else:
                bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç, –∫–∞–π—Ñ—É–µ–º')
        else:
            bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /reg')

    elif message.text.lower() == '–ø—Ä–æ—Ñ–∏–ª—åüíª':
        mark = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–ΩüóìüÜï')
        btn2 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—åüóìüÜï')
        btn3 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        btn4 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
        mark.row(btn1, btn2)
        mark.row(btn3)
        mark.row(btn4)
        connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
        curbaz = connect.cursor()
        curbaz.execute('SELECT * FROM users')
        users = curbaz.fetchall()
        i = 0
        for el in users:
            if str(message.from_user.id) == str(el[0]):
                find_user = 0
                i += 1
                break
            else:
                find_user = 1
                i += 1
        if find_user == 0:
            achievement_wins = int(el[3])
            achievement_check_study_schedule = int(el[4])

            if achievement_wins <= 100:
                achievement_wins_info = '–ë—Ä–æ–Ω–∑–∞'
            elif (achievement_wins < 300) and (achievement_wins > 100):
                achievement_wins_info = '–°–µ—Ä–µ–±—Ä–æ'
            elif achievement_wins == 300:
                achievement_wins_info = '–ó–æ–ª–æ—Ç–æ'
            if achievement_check_study_schedule <= 40:
                achievement_check_study_schedule_info = '–ë—Ä–æ–Ω–∑–∞'
            elif (achievement_check_study_schedule < 100) and (achievement_check_study_schedule > 40):
                achievement_check_study_schedule_info = '–°–µ—Ä–µ–±—Ä–æ'
            elif achievement_check_study_schedule == 100:
                achievement_check_study_schedule_info = '–ó–æ–ª–æ—Ç–æ'
            if (achievement_wins_info == achievement_check_study_schedule_info) and (achievement_wins_info == '–ó–æ–ª–æ—Ç–æ'):
                status_of_user = '–ë–æ–≥üôä'
            elif achievement_wins_info == achievement_check_study_schedule_info and achievement_wins_info == '–°–µ—Ä–µ–±—Ä–æ':
                status_of_user = '–ö—Ä–∞—Å–∞–≤—á–∏–∫üëø'
            else:
                status_of_user = '–Æ–∑–µ—Äüë®üèª‚Äçüíª'
            for ele in admins:
                if str(ele) == str(message.chat.id):
                    status_of_user = '<b><i>adminü¶Ñ</i></b>'
            bot.send_message(message.chat.id,
                             '-------<b>–¢–í–û–ô –ü–†–û–§–ò–õ–¨</b>-------\n\n\n-_-_-<b><i>–û–°–ù–û–í–ù–û–ï</i></b>-_-_-\n\n' +
                             f'‚õÑÔ∏è <b>–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞</b>: {message.from_user.first_name}' +
                             '\n<b>–°—Ç–∞—Ç—É—Å:</b> ' + status_of_user + '\nüÜî <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π id:</b>  <i>' + str(
                                 el[0]) + '</i>\nüìà –ü–æ —Å—á–µ—Ç—É –≤ –±–æ—Ç–µ: ' + str(i) +
                             '\n\n\n-_-_-<b><i>–ò–¢–ú–û ID</i></b>-_-_-\n' + '\nüîí <b>–õ–æ–≥–∏–Ω ItmoID:</b> <i>' + str(
                                 el[1]) + '</i>\nüóùÔ∏è <b>–ü–∞—Ä–æ–ª—å ItmoID:</b> <i>' +
                             str(el[2]) + '\n\n\n-_-_-<b>–ê–ß–ò–í–ö–ò</b>-_-_-\n' + '</i>\nüéÆÔ∏è <b>–ü–æ–±–µ–¥ –≤ –∏–≥—Ä–∞—Ö:</b> ' + str(
                                 el[3]) + '\nüî∞ <b>–ê—á–∏–≤–∫–∞ 1</b> (–ø–æ–±–µ–¥—ã) –ø—Ä–æ–≥—Ä–µ—Å—Å <b>' + str(
                                 achievement_wins) + '/300</b> - ' + achievement_wins_info +
                             '\nüëÄ <b>–ê—á–∏–≤–∫–∞ 2</b> (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è) –ø—Ä–æ–≥—Ä–µ—Å—Å <b>' + str(
                                 achievement_check_study_schedule) + '/100</b> - ' +
                             achievement_check_study_schedule_info,
                             parse_mode='html', reply_markup=mark)
            bot.register_next_step_handler(message, edit_profile)
        else:
            bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! /reg')

    elif message.text.lower() == '–∏–≥—Ä—ãüéÆÔ∏è':
        markup = types.ReplyKeyboardMarkup()
        btn10 = types.KeyboardButton('ü™®‚úÇÔ∏èüßª')
        btn11 = types.KeyboardButton('21')
        btn12 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        markup.row(btn10, btn11)
        markup.row(btn12)
        bot.send_message(message.chat.id, '–ò–≥—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, games)

    elif message.text.lower() == '–ø–æ–≥–æ–¥–∞‚õÖÔ∏è':
        driver = webdriver.Chrome()
        driver.get('https://yandex.ru/pogoda/saint-petersburg?lat=60.050076&lon=30.340248')
        time.sleep(6)
        temperature_info = driver.find_element(By.XPATH, '//*[@id="content_left"]/div[2]/div[1]/div[5]/a/div/div[1]')
        analytics_weather_info = driver.find_element(By.XPATH,
                                                     '//*[@id="content_left"]/div[2]/div[1]/div[5]/a/div/div[2]')
        humidity_weather_info = driver.find_element(By.XPATH, '//*[@id="content_left"]/div[2]/div[1]/div[7]/div[2]')
        pressure_weather_info = driver.find_element(By.XPATH, '//*[@id="content_left"]/div[2]/div[1]/div[7]/div[3]')
        wind_weather_info = driver.find_element(By.XPATH, '//*[@id="content_left"]/div[2]/div[1]/div[7]/div[1]')
        analytics_weather_info_text = analytics_weather_info.text
        analytics_weather_info_text = analytics_weather_info_text.replace('\n', ' ')
        analytics_weather_info_text = analytics_weather_info_text.replace('–û—â—É—â–∞–µ—Ç—Å—è', '\n–û—â—É—â–∞–µ—Ç—Å—è')
        bot.send_message(message.chat.id,
                         '–°–µ–π—á–∞—Å –≤ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ: ' + analytics_weather_info_text + '\n' + '-' + '\n<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> ' +
                         temperature_info.text + ' –≥—Ä.'
                         + '\n' + '-' + '\n' + '<b>–í–µ—Ç–µ—Ä:</b> ' + wind_weather_info.text + '\n' + '-' + '\n' +
                         '<b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> ' + humidity_weather_info.text
                         + '\n' + '-' + '\n' + '<b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> ' + pressure_weather_info.text, parse_mode='html')

    elif message.text.lower() == '–ø–æ–º–æ—â—åüÜò':
        helpmes(message)
    elif message.text.lower() == '—Ö–µ–ª–ø':
        helpmes(message)

    elif message.text.lower() == '–∏—Ç–º–æ':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç - https://itmo.ru/')
    elif message.text.lower() == 'itmo':
        bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç - https://itmo.ru/')
    elif message.text.lower() == '—Ö–µ–ª–ø–¥–µ—Å–∫':
        bot.send_message(message.chat.id, 'HelpDesk - https://helpdesk.itmo.ru/servicedesk/customer/user/profile')
    elif message.text.lower() == '—Ö–µ–ª–ø –¥–µ—Å–∫':
        bot.send_message(message.chat.id, 'HelpDesk - https://helpdesk.itmo.ru/servicedesk/customer/user/profile')
    elif message.text.lower() == 'helpdesk':
        bot.send_message(message.chat.id, 'HelpDesk - https://helpdesk.itmo.ru/servicedesk/customer/user/profile')
    elif message.text.lower() == 'help desk':
        bot.send_message(message.chat.id, 'HelpDesk - https://helpdesk.itmo.ru/servicedesk/customer/user/profile')
    elif message.text.lower() == '–º–∞–π –∏—Ç–º–æ':
        bot.send_message(message.chat.id, 'My.Itmo - https://my.itmo.ru/schedule?date=2023-09-21')
    elif message.text.lower() == '–º–∞–π–∏—Ç–º–æ':
        bot.send_message(message.chat.id, 'My.Itmo - https://my.itmo.ru/schedule?date=2023-09-21')
    elif message.text.lower() == 'myitmo':
        bot.send_message(message.chat.id, 'My.Itmo - https://my.itmo.ru/schedule?date=2023-09-21')
    elif message.text.lower() == 'my itmo':
        bot.send_message(message.chat.id, 'My.Itmo - https://my.itmo.ru/schedule?date=2023-09-21')
    elif message.text.lower() == '–±–∂–¥':
        bot.send_message(message.chat.id, 'Itmo Lifesafety (–ë–ñ–î) - https://lifesafety.itmo.ru/m/my/')
    elif message.text == 'id':
        bot.send_message(message.chat.id, message.chat.id)

    elif message.text.lower() == '—Å—Å—ã–ª–∫–∏üîó':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='TG', callback_data='tg')
        btn2 = types.InlineKeyboardButton(text='VK', callback_data='vk')
        btn3 = types.InlineKeyboardButton(text='BROWSER', callback_data='br')
        markup.row(btn1, btn2)
        markup.row(btn3)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏, –≥–¥–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏', reply_markup=markup)

        # -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_- –ö–ú–ù _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

    elif message.text.lower() == 'ü™®‚úÇÔ∏èüßª':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='ü™®', callback_data='1')
        btn2 = types.InlineKeyboardButton(text='‚úÇÔ∏è', callback_data='2')
        btn3 = types.InlineKeyboardButton(text='üßª', callback_data='3')
        markup.row(btn1, btn2, btn3)
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –í—ã–±–µ—Ä–∏ —á–µ–º —Ö–æ–¥–∏—à—å',
                         reply_markup=markup)

    elif message.text.lower() == '–∫–º–Ω –∫–∞–º–µ–Ω—å':
        # 0 - –∫–∞–º–µ–Ω—å 1 - –Ω–æ–∂–Ω–∏—Ü—ã 2 - –±—É–º–∞–≥–∞
        random_kmn_motion = random.randint(0, 3)
        if random_kmn_motion == 0:
            bot.reply_to(message, '–Ø —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! –ù–∏—á—å—è!')
        elif random_kmn_motion == 1:
            bot.reply_to(message, '–ú–æ–π —Ö–æ–¥ - –Ω–æ–∂–Ω–∏—Ü—ã, —Ç—ã –ø–æ–±–µ–¥–∏–ª(\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(message.from_user.id) == str(el[0]):
                    find_user = 0
                    break
                else:
                    find_user = 1

            if find_user == 0:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                id = str(el[0])
                parol = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (parol, id))

                sqlite_connection.commit()
                cursor.close()
        else:
            bot.reply_to(message, '–•–∞-–∞-–∞—Ö, –ª–µ–≥–∫–æ, –º–æ–π –≤—ã–±–æ—Ä - –±—É–º–∞–≥–∞')
    elif message.text.lower() == '–∫–º–Ω –Ω–æ–∂–Ω–∏—Ü—ã':
        # 0 - –∫–∞–º–µ–Ω—å 1 - –Ω–æ–∂–Ω–∏—Ü—ã 2 - –±—É–º–∞–≥–∞
        random_kmn_motion = random.randint(0, 3)
        if random_kmn_motion == 0:
            bot.reply_to(message, '–£–≥–∞–¥–∞–π –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?')
            time.sleep(1)
            bot.reply_to(message, '–ë–æ—Ç - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å. –ù–µ –∑—Ä—è –≤–∑—è–ª –∫–∞–º–µ–Ω—å')
        elif random_kmn_motion == 1:
            bot.reply_to(message, '–ò —É –º–µ–Ω—è –Ω–æ–∂–Ω–∏—Ü—ã!')
        else:
            bot.reply_to(message, '–°–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å... –ú–µ–Ω—è —Ä–∞–∑—Ä–µ–∑–∞–ª–∏\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(message.from_user.id) == str(el[0]):
                    find_user = 0
                    break
                else:
                    find_user = 1

            if find_user == 0:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                id = str(el[0])
                parol = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (parol, id))

                sqlite_connection.commit()
                cursor.close()
    elif message.text.lower() == '–∫–º–Ω –±—É–º–∞–≥–∞':
        # 0 - –∫–∞–º–µ–Ω—å 1 - –Ω–æ–∂–Ω–∏—Ü—ã 2 - –±—É–º–∞–≥–∞
        random_kmn_motion = random.randint(0, 3)
        if random_kmn_motion == 0:
            bot.reply_to(message, '–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ? –ø–æ—á–µ–º—É –±—É–º–∞–≥–∞? —Ç—ã –ø–æ–±–µ–¥–∏–ª...\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(message.from_user.id) == str(el[0]):
                    find_user = 1
                    break
                else:
                    find_user = 0

            if find_user == 1:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                id = str(el[0])
                parol = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (parol, id))

                sqlite_connection.commit()
                cursor.close()
        elif random_kmn_motion == 1:
            bot.reply_to(message,
                         f'–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑, {message.from_user.first_name}, –º–æ–∏ –Ω–æ–∂–Ω–∏—Ü—ã –æ—Å–∏–ª–∏–ª–∏ —Ç–≤–æ—é –±—É–º–∞–≥—É')
        else:
            bot.reply_to(message, '–ò –≤–æ—Ç —Å–Ω–æ–≤–∞ —É –Ω–∞—Å –Ω–∏—á—å—è)')
    elif 'ans' in message.text:
        for elements in admins:
            if str(elements) == str(message.from_user.id):
                user_id = ''
                message_from_admin = str(message.text)
                message_from_admin = message_from_admin.replace('ans', '')
                for i in message_from_admin:
                    if i in '0123456789':
                        user_id += i
                message_from_admin = message_from_admin.replace(user_id, '')
                message_from_admin = message_from_admin.strip()
                message_from_admin = '"' + message_from_admin + '"'
                bot.send_message(user_id, '–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞: ' + message_from_admin)
            else:
                bot.reply_to(message, '–¢–∞–∫–æ–≥–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–Ω–∞—é')
                bot.send_message(message.chat.id,
                                 '–í–≤–æ–¥–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—É /help (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–ø–æ–º–æ—â—å\—Ö–µ–ª–ø", —á—Ç–æ–±—ã '
                                 '–Ω–µ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É!\n–¢–∞–∫–∂–µ, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /code –∏ —É–≤–∏–¥–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥')

    else:
        bot.reply_to(message, '–¢–∞–∫–æ–≥–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–Ω–∞—é')
        bot.send_message(message.chat.id,
                         '–í–≤–æ–¥–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—É /help (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "–ø–æ–º–æ—â—å\—Ö–µ–ª–ø", —á—Ç–æ–±—ã –Ω–µ '
                         '–∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É!\n–¢–∞–∫–∂–µ, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /code –∏ —É–≤–∏–¥–µ—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥')


def edit_profile(message):
    markup = types.ReplyKeyboardMarkup()
    btn10 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.row(btn10)
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('ü™®‚úÇÔ∏èüßª')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é!', reply_markup=mark)
    elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–ΩüóìüÜï':
        bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –õ–æ–≥–∏–Ω–∞', reply_markup=markup)
        new_user_login(message)
    elif message.text.lower() == '–∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—åüóìüÜï':
        bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è', reply_markup=markup)
        new_user_password(message)
    elif message.text.lower() == '—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
        curbaz = connect.cursor()
        id = message.chat.id
        curbaz.execute('''DELETE FROM users WHERE uid = ?''', (id,))
        connect.commit()
        bot.send_message(message.chat.id, '–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω', reply_markup=mark)
    else:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫!')
        bot.register_next_step_handler(message, edit_profile)


def games(message):
    markup = types.ReplyKeyboardMarkup()
    btn10 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.row(btn10)
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(message.chat.id, '–í—ã –≤ –º–µ–Ω—é!', reply_markup=mark)
    elif message.text.lower() == '21':
        # markup = types.ReplyKeyboardMarkup()
        # btn10 = types.KeyboardButton('–ï—â–µ')
        # btn11 = types.KeyboardButton('–°—Ç–æ–ø')
        # markup.row(btn10)
        # markup.row(btn11)
        # global score21_user
        # global score21_bot
        # a = random.randint(1, 11)
        # b = random.randint(1, 10)
        # score21_user = score21_user + a + b
        # a = random.randint(1, 11)
        # b = random.randint(1, 10)
        # score21_bot = score21_bot + a + b
        # for i in range(0, 3):
        #     if score21_bot < 21:
        bot.send_message(message.chat.id, '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞...')
        bot.register_next_step_handler(message, games)
    elif message.text.lower() == 'ü™®‚úÇÔ∏èüßª':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='ü™®', callback_data='1')
        btn2 = types.InlineKeyboardButton(text='‚úÇÔ∏è', callback_data='2')
        btn3 = types.InlineKeyboardButton(text='üßª', callback_data='3')
        markup.row(btn1, btn2, btn3)
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, –í—ã–±–µ—Ä–∏ —á–µ–º —Ö–æ–¥–∏—à—å',
                         reply_markup=markup)
        bot.register_next_step_handler(message, games)
    else:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!')
        bot.register_next_step_handler(message, games)


def poj(message):
    mark = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüíª')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
    btn3 = types.KeyboardButton('–°—Å—ã–ª–∫–∏üîó')
    btn4 = types.KeyboardButton('–ü–æ–º–æ—â—åüÜò')
    btn5 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞‚õÖÔ∏è')
    btn6 = types.KeyboardButton('–ò–≥—Ä—ãüéÆÔ∏è')
    btn7 = types.KeyboardButton('–ü–æ–∂–µ–ª–∞–Ω–∏–µüìù')
    mark.row(btn1, btn2)
    mark.row(btn3)
    mark.row(btn4, btn5)
    mark.row(btn6)
    mark.row(btn7)
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=mark)
    elif message.text.lower() == '—á—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ?':
        bot.send_message(message.chat.id, '<b>–ü–æ–∂–µ–ª–∞–Ω–∏–µ</b> - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –º–æ–µ–º—É –∞–¥–º–∏–Ω—É, –ø–æ–ø—Ä–æ—Å–∏—Ç—å '
                                          '–¥–æ–±–∞–≤–∏—Ç—å –º–Ω–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.'
                                          '\n<b>–ê–¥–º–∏–Ω</b> –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ—Ç', parse_mode='html')
        bot.register_next_step_handler(message, poj)
    else:
        s = message.text
        s = s.lower()
        s = s.strip()
        s = '"' + s + '"'
        bot.send_message(747864333, '–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç ' + str(message.chat.id) + ': ' + s + '\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + str(
            message.from_user.first_name))
        bot.send_message(message.chat.id, '–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ‚úÖ, –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –ø–æ-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', reply_markup=mark)


# -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-  Callback –ë–û–¢–ê _-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-

@bot.callback_query_handler(func=lambda callback: callback.data)
def callback_mess(callback):
    # 0 - –∫–∞–º–µ–Ω—å 1 - –Ω–æ–∂–Ω–∏—Ü—ã 2 - –±—É–º–∞–≥–∞
    global el, find_user, find_user
    random_kmn_motion = random.randint(0, 3)
    if callback.data == '1':
        if random_kmn_motion == 0:
            bot.send_message(callback.message.chat.id, '–Ø —Ç–æ–∂–µ –≤—ã–±—Ä–∞–ª –∫–∞–º–µ–Ω—å! –ù–∏—á—å—è!')
        elif random_kmn_motion == 1:
            bot.send_message(callback.message.chat.id, '–ú–æ–π —Ö–æ–¥ - –Ω–æ–∂–Ω–∏—Ü—ã, —Ç—ã –ø–æ–±–µ–¥–∏–ª(\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(callback.message.chat.id) == str(el[0]):
                    find_user = 0
                    break
                else:
                    find_user = 1

            if find_user == 0:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                id = str(el[0])
                wins_info = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (wins_info, id))

                sqlite_connection.commit()
                cursor.close()
        else:
            bot.send_message(callback.message.chat.id, '–•–∞-–∞-–∞—Ö, –ª–µ–≥–∫–æ, –º–æ–π –≤—ã–±–æ—Ä - –±—É–º–∞–≥–∞')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == '2':
        if random_kmn_motion == 0:
            bot.send_message(callback.message.chat.id, '–£–≥–∞–¥–∞–π –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?')
            time.sleep(1)
            bot.send_message(callback.message.chat.id, '–ë–æ—Ç - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å. –ù–µ –∑—Ä—è –≤–∑—è–ª –∫–∞–º–µ–Ω—å')
        elif random_kmn_motion == 1:
            bot.send_message(callback.message.chat.id, '–ò —É –º–µ–Ω—è –Ω–æ–∂–Ω–∏—Ü—ã!')
        else:
            bot.send_message(callback.message.chat.id, '–°–µ–≥–æ–¥–Ω—è –Ω–µ –º–æ–π –¥–µ–Ω—å... –ú–µ–Ω—è —Ä–∞–∑—Ä–µ–∑–∞–ª–∏\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(callback.message.chat.id) == str(el[0]):
                    find_user = 0
                    break
                else:
                    find_user = 1

            if find_user == 0:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                print("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite")
                id = str(el[0])
                wins_info = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (wins_info, id))

                sqlite_connection.commit()
                cursor.close()
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == '3':
        if random_kmn_motion == 0:
            bot.send_message(callback.message.chat.id,
                             '–¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ?! –ø–æ—á–µ–º—É –±—É–º–∞–≥–∞? \n—Ç—ã –ø–æ–±–µ–¥–∏–ª...\n+1 –±–∞–ª–ª –≤ –∫–æ–ø–∏–ª–∫—É')
            connect = sqlite3.connect('itmohelpbot.sql')  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
            curbaz = connect.cursor()
            curbaz.execute('SELECT * FROM users')
            users = curbaz.fetchall()

            for el in users:
                if str(callback.message.chat.id) == str(el[0]):
                    find_user = 0
                    break
                else:
                    find_user = 1

            if find_user == 0:
                sqlite_connection = sqlite3.connect('itmohelpbot.sql')
                cursor = sqlite_connection.cursor()
                id = str(el[0])
                wins_info = int(el[3]) + 1
                cursor.execute('''UPDATE users SET wins = ? WHERE uid = ?''', (wins_info, id))

                sqlite_connection.commit()
                cursor.close()
        elif random_kmn_motion == 1:
            bot.send_message(callback.message.chat.id, '–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑, –º–æ–∏ –Ω–æ–∂–Ω–∏—Ü—ã –æ—Å–∏–ª–∏–ª–∏ —Ç–≤–æ—é –±—É–º–∞–≥—É')
        else:
            bot.send_message(callback.message.chat.id, '–ò –≤–æ—Ç —Å–Ω–æ–≤–∞ —É –Ω–∞—Å –Ω–∏—á—å—è)')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'tg':
        bot.send_message(callback.message.chat.id,
                         '<b>–¢–≥:</b> \nhttps://t.me/addlist/0xk0Edml0KsyZDJi - –ø–∞–ø–∫–∞ —Å –∫—É—á–µ–π –∫–∞–Ω–∞–ª–æ–≤ –∏—Ç–º–æ'
                         '\n@Olimpiads_ru_bot - —Ö–∞–∫–∞—Ç–æ–Ω—ã –∏ –æ–ª–∏–º–ø–∏–∞–¥—ã\n@itmo_career_center_bot - –¥–æ—Å—Ç—É–ø –≤ –∫–ª—É–± "–ö–∞—Ä—å–µ—Ä–∞"'
                         '\nhttps://t.me/+HdedkrBbI0YwYmFi - —á–∞—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º\nhttps://t.me/megabytecode - –º–µ–≥–∞–±–∞–π—Ç',
                         parse_mode='html')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'vk':
        bot.send_message(callback.message.chat.id,
                         '<b>–í–∫:</b>\nhttps://vk.com/kb_ballroom - –ö—Ä–æ–Ω–≤–µ—Ä—Å–∫–∏–µ –±–∞—Ä—Å—ã\nhttps://vk.com/itmobuddy - buddy system'
                         '\nhttps://vk.com/lifesafety_itmo - –±–∂–¥\nhttps://vk.com/club_nirs_itmo - —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä —Å—Ç—É–¥. –Ω–∞—É–∫–∏'
                         '\nhttps://vk.com/fltc.itmo - —è–∑—ã–∫–∏\nhttps://vk.com/itmostudents - itmo students'
                         '\nhttps://vk.com/alumni.itmo - –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏\nhttps://vk.com/mb.news - –º–∞–≥–∞–±–∞–π—Ç'
                         '\nhttps://vk.com/yagodnoeitmo - –Ø–≥–æ–¥–Ω–æ–µ\nhttps://vk.com/itmo_uni - –≥—Ä—É–ø–ø–∞ –∏—Ç–º–æ –Ω–∞ –∞–Ω–≥–ª'
                         '\nhttps://vk.com/scamt - –Ω–∞—É—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä scamt\nhttps://vk.com/itmo.expert - itmo expert'
                         '\nhttps://vk.com/physics.itmo - –Ω–æ–≤—ã–π —Ñ–∏–∑—Ç–µ—Ö\nhttps://vk.com/itmomegabattle - –º–µ–≥–∞–±–∞—Ç–ª'
                         '\nhttps://vk.com/adapteritmo - –∞–¥–∞–ø—Ç–µ—Ä\nhttps://vk.com/pro.itmo - –ø—Ä–æ –∏—Ç–º–æ'
                         '\nhttps://vk.com/artmo.club - –∫–ª—É–± –∞—Ä—Ç–º–æ\nhttps://vk.com/itmo_speaking_club - speaking club'
                         '\nhttps://vk.com/muzclubitmo - –∫–ª—É–± –∂–∏–≤–æ–π –∑–≤—É–∫\nhttps://vk.com/ktu.crew - –ö–¢–£'
                         '\nhttps://vk.com/health_itmo - –∑–¥–æ—Ä–æ–≤—å–µ \nhttps://vk.com/itmoru - –æ—Ñ. —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ò–¢–ú–û',
                         parse_mode='html')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'br':
        bot.send_message(callback.message.chat.id,
                         '<b>–ë—Ä–∞—É–∑–µ—Ä:</b>\n–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç - https://itmo.ru/\nMy.Itmo - https://my.itmo.ru/schedule?date=2023-09-21'
                         '\nHelpDesk - https://helpdesk.itmo.ru/servicedesk/customer/user/profile\n'
                         '–ò—Å—É –ò—Ç–º–æ - https://isu.ifmo.ru/pls/apex/f?p=2143:1:109969888406175\n'
                         'Itmo Lifesafety (–ë–ñ–î) - https://lifesafety.itmo.ru/m/my/', parse_mode='html')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'github':
        bot.send_message(callback.message.chat.id, 'https://github.com/WALTANN/ItmoHelper-bot')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'txt':
        bot.send_message(callback.message.chat.id,
                         "–ö–æ–¥ –ø–æ–∫–∞ –Ω–µ –≤—ã–ª–æ–∂–µ–Ω :((, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –Ω–∞ GitHub'–µ - https://github.com/WALTANN/ItmoHelper-bot")
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


bot.polling(none_stop=True, interval=0)
